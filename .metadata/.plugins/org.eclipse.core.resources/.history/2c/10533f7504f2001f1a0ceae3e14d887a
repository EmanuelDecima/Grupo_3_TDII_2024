/*
 * RADAR_HCSR04.c
 *
 *  Created on: Feb 17, 2025
 *      Author: Grupo 3_TD2	Enrique Emanuel Decima, Castro Oscar Martin, Ortiz Nicolas Agustin
 */

#include "RADAR_HCSR04.h"

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim);

uint32_t IC_Val1 = 0;
uint32_t IC_Val2 = 0;
uint32_t Difference = 0;
bool Capture_flag = 0;  // is the first value captured ?
distance_t Distance = 0;
distance_t Filter[45];

static void HCSR04_Delay_us (uint16_t us){
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
}

static void HCSR04_Read(){
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
	HCSR04_Delay_us(10);  // wait for 10 us
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
}

static void HCSR04_CaptureMeasures(){
	for(int i=0;i<45;i++){
		HCSR04_Read();
		Filter[i] = Distance;
		HAL_Delay(5);
	}
}

static void HCSR04_ResetFilter(){
	for(int i=0;i<sizeof(Filter);i++){
		Filter[i] = 0;
	}
}

static void HCSR04_BubbleSort(){
	for (int i = 0; i < 45 - 1; i++) {
		for (int j = 0; j < 45 - i - 1; j++) {
			if (Filter[j] > Filter[j + 1]) {
				int temp = Filter[j];
				Filter[j] = Filter[j+1];
				Filter[j+1] = temp;
			}
		}
	}
}

void HCSR04_Init(){
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
}

distance_t HCSR04_GetMeasure(){
	HCSR04_ResetFilter();
	HCSR04_CaptureMeasures();
	HCSR04_BubbleSort();
	return Filter[23];
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
	{
		if (Capture_flag==0) // if the first value is not captured
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
			Capture_flag = 1;  // set the first captured as true
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
		}

		else if (Capture_flag==1)   // if the first is already captured
		{
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter

			if (IC_Val2 > IC_Val1)
			{
				Difference = IC_Val2-IC_Val1;
			}

			else if (IC_Val1 > IC_Val2)
			{
				Difference = (0xffff - IC_Val1) + IC_Val2;
			}

			Distance = Difference * .034/2;
			Capture_flag = 0; // set it back to false

			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
