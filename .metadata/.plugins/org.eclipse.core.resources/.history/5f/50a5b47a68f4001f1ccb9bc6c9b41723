/*
 * RADAR_LCD.c
 *
 *  Created on: Feb 22, 2025
 *      Author: EmanuelDecima
 */

#include "main.h"
#include "RADAR_LCD.h"


#define SLAVE_ADDRESS_LCD 0x4E //Direccion del Modulo PCF8574

/*
 * @brief Inicializa el LCD con una secuencia de comandos especifica
 * @param None
 * @retval None
 */
void LCD_Init(void)
{
	//Inicializa el modulo en modo 4bits
	HAL_Delay(50);  // wait for >40ms
	LCD_SendCmd(0x30);
	HAL_Delay(5);  // wait for >4.1ms
	LCD_SendCmd(0x30);
	HAL_Delay(1);  // wait for >100us
	LCD_SendCmd(0x30);
	HAL_Delay(10);
	LCD_SendCmd(0x20);  // 4bit mode
	HAL_Delay(10);

    //Inicializacion del Display
	LCD_SendCmd(0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
	HAL_Delay(1);
	LCD_SendCmd(0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
	HAL_Delay(1);
	LCD_SendCmd(0x01);  // clear display
	HAL_Delay(1);
	HAL_Delay(1);
	LCD_SendCmd(0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
	HAL_Delay(1);
	LCD_SendCmd(0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
}

/*
 * @brief Enviar un comando
 * @param char cmd
 * @retval None
 */
void LCD_SendCmd(char cmd)
{
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
	data_l = ((cmd<<4)&0xf0);
	data_t[0] = data_u|0x0C;  //en=1, rs=0
	data_t[1] = data_u|0x08;  //en=0, rs=0
	data_t[2] = data_l|0x0C;  //en=1, rs=0
	data_t[3] = data_l|0x08;  //en=0, rs=0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
}

/*
 * @brief Enviar un caracter
 * @param char data
 * @retval None
 */
void LCD_SendData (char data)
{
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
	data_l = ((data<<4)&0xf0);
	data_t[0] = data_u|0x0D;  //en=1, rs=0
	data_t[1] = data_u|0x09;  //en=0, rs=0
	data_t[2] = data_l|0x0D;  //en=1, rs=0
	data_t[3] = data_l|0x09;  //en=0, rs=0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
}

/*
 * @brief Limpiar la Pantalla
 * @param None
 * @retval None
 */
void LCD_Clear (void)
{
	LCD_SendCmd(0x80);
	for (int i=0; i<70; i++)
	{
		LCD_SendData(' ');
	}
}

/*
 * @brief Posicionar el cursor en un lugar especifico
 * @param int row, int col (row=fila, col=columna)
 * @retval None
 */
void LCD_PutCur(int row, int col)
{
    switch (row)
    {
        case 0:
            col |= 0x80;
            break;
        case 1:
            col |= 0xC0;
            break;
    }

    LCD_SendCmd(col);
}

/*
 * @brief Enviar una cadena de caracteres
 * @param char* str
 * @retval None
 */
void LCD_SendString (char *str)
{
	while (*str) LCD_SendData(*str++);
}

/*
 * @brief Convierte un entero a cadena de caracteres y lo envia
 * @param int number
 * @retval None
 */
void LCD_SendNumber(int number){
	char str[10];
	sprintf(str,"%d",number);
	LCD_SendString(str);

}

void LCD_ShowData(uint8_t distance, uint8_t angle){
	LCD_Clear();
	LCD_PutCur(0, 0);
	LCD_SendString("Angulo: ");
	LCD_SendNumber(angle);
	LCD_PutCur(1, 0);
	LCD_SendString("Medida: ");
	LCD_SendNumber(distance);
	LCD_SendString("cm");
}

